# Generated by Django 3.2.23 on 2023-12-01 01:36

import core.models
from django.conf import settings
import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_rdkit.models.fields
import simple_history.models
from django.contrib.postgres.operations import CreateExtension


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [CreateExtension(name='rdkit'),
                  migrations.CreateModel(
        name='User',
        fields=[
            ('id', models.BigAutoField(auto_created=True,
                                       primary_key=True, serialize=False, verbose_name='ID')),
            ('password', models.CharField(
                max_length=128, verbose_name='password')),
            ('last_login', models.DateTimeField(
                blank=True, null=True, verbose_name='last login')),
            ('email', models.EmailField(max_length=255, unique=True)),
            ('name', models.CharField(max_length=255)),
            ('organization', models.CharField(max_length=255)),
            ('is_active', models.BooleanField(default=True)),
            ('is_staff', models.BooleanField(default=True)),
            ('is_superuser', models.BooleanField(default=True)),
        ],
        options={
            'abstract': False,
        },
    ),
        migrations.CreateModel(
            name='HistoricalLine',
            fields=[
                ('id', models.BigIntegerField(auto_created=True,
                 blank=True, db_index=True, verbose_name='ID')),
                ('measured', models.BooleanField()),
                ('frequency', core.models.ArbitraryDecimalField()),
                ('uncertainty', core.models.ArbitraryDecimalField()),
                ('intensity', core.models.ArbitraryDecimalField()),
                ('s_ij', core.models.ArbitraryDecimalField(null=True)),
                ('s_ij_mu2', core.models.ArbitraryDecimalField()),
                ('a_ij', core.models.ArbitraryDecimalField()),
                ('lower_state_energy', core.models.ArbitraryDecimalField()),
                ('upper_state_energy', core.models.ArbitraryDecimalField()),
                ('lower_state_degeneracy', models.IntegerField()),
                ('upper_state_degeneracy', models.IntegerField()),
                ('lower_state_qn', models.JSONField()),
                ('upper_state_qn', models.JSONField()),
                ('rovibrational', models.BooleanField()),
                ('vib_qn', models.CharField(blank=True, max_length=255)),
                ('pickett_qn_code', models.IntegerField()),
                ('pickett_lower_state_qn', models.CharField(max_length=255)),
                ('pickett_upper_state_qn', models.CharField(max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.TextField(null=True)),
                ('history_type', models.CharField(choices=[
                 ('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical line',
                'verbose_name_plural': 'historical lines',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
    ),
        migrations.CreateModel(
            name='HistoricalLinelist',
            fields=[
                ('id', models.BigIntegerField(auto_created=True,
                 blank=True, db_index=True, verbose_name='ID')),
                ('linelist_name', models.CharField(db_index=True, max_length=255)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.TextField(null=True)),
                ('history_type', models.CharField(choices=[
                 ('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical linelist',
                'verbose_name_plural': 'historical linelists',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
    ),
        migrations.CreateModel(
            name='HistoricalMetaReference',
            fields=[
                ('id', models.BigIntegerField(auto_created=True,
                 blank=True, db_index=True, verbose_name='ID')),
                ('dipole_moment', models.BooleanField()),
                ('spectrum', models.BooleanField()),
                ('notes', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.TextField(null=True)),
                ('history_type', models.CharField(choices=[
                 ('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical meta reference',
                'verbose_name_plural': 'historical meta references',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
    ),
        migrations.CreateModel(
            name='HistoricalReference',
            fields=[
                ('id', models.BigIntegerField(auto_created=True,
                 blank=True, db_index=True, verbose_name='ID')),
                ('doi', models.CharField(blank=True, max_length=255)),
                ('ref_url', models.CharField(db_index=True, max_length=255)),
                ('bibtex', models.TextField(max_length=100, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['bib'])])),
                ('notes', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.TextField(null=True)),
                ('history_type', models.CharField(choices=[
                 ('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical reference',
                'verbose_name_plural': 'historical references',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
    ),
        migrations.CreateModel(
            name='HistoricalSpecies',
            fields=[
                ('id', models.BigIntegerField(auto_created=True,
                 blank=True, db_index=True, verbose_name='ID')),
                ('name', models.JSONField()),
                ('iupac_name', models.CharField(db_index=True, max_length=255)),
                ('name_formula', models.CharField(max_length=255)),
                ('name_html', models.CharField(max_length=255)),
                ('molecular_mass', core.models.ArbitraryDecimalField()),
                ('smiles', models.CharField(max_length=255)),
                ('standard_inchi', models.CharField(max_length=255)),
                ('standard_inchi_key', models.CharField(max_length=255)),
                ('selfies', models.CharField(max_length=255)),
                ('mol_obj', django_rdkit.models.fields.MolField()),
                ('notes', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.TextField(null=True)),
                ('history_type', models.CharField(choices=[
                 ('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical species',
                'verbose_name_plural': 'historical Species',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
    ),
        migrations.CreateModel(
            name='HistoricalSpeciesMetadata',
            fields=[
                ('id', models.BigIntegerField(auto_created=True,
                 blank=True, db_index=True, verbose_name='ID')),
                ('molecule_tag', models.IntegerField(blank=True, null=True)),
                ('hyperfine', models.BooleanField()),
                ('degree_of_freedom', models.IntegerField()),
                ('category', models.CharField(max_length=255)),
                ('partition_function', models.JSONField()),
                ('mu_a', core.models.ArbitraryDecimalField(null=True)),
                ('mu_b', core.models.ArbitraryDecimalField(null=True)),
                ('mu_c', core.models.ArbitraryDecimalField(null=True)),
                ('a_const', core.models.ArbitraryDecimalField(null=True)),
                ('b_const', core.models.ArbitraryDecimalField(null=True)),
                ('c_const', core.models.ArbitraryDecimalField(null=True)),
                ('data_date', models.DateField()),
                ('data_contributor', models.CharField(max_length=255)),
                ('int_file', models.TextField(max_length=100, null=True, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['int'])])),
                ('var_file', models.TextField(max_length=100, null=True, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['var'])])),
                ('fit_file', models.TextField(max_length=100, null=True, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['fit'])])),
                ('lin_file', models.TextField(max_length=100, null=True, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['lin'])])),
                ('qpart_file', models.TextField(max_length=100, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['qpart'])])),
                ('notes', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.TextField(null=True)),
                ('history_type', models.CharField(choices=[
                 ('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical species metadata',
                'verbose_name_plural': 'historical Species metadata',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
    ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.BigIntegerField(auto_created=True,
                 blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(db_index=True, max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('organization', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.TextField(null=True)),
                ('history_type', models.CharField(choices=[
                 ('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical user',
                'verbose_name_plural': 'historical users',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
    ),
        migrations.CreateModel(
            name='Line',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('measured', models.BooleanField()),
                ('frequency', core.models.ArbitraryDecimalField()),
                ('uncertainty', core.models.ArbitraryDecimalField()),
                ('intensity', core.models.ArbitraryDecimalField()),
                ('s_ij', core.models.ArbitraryDecimalField(null=True)),
                ('s_ij_mu2', core.models.ArbitraryDecimalField()),
                ('a_ij', core.models.ArbitraryDecimalField()),
                ('lower_state_energy', core.models.ArbitraryDecimalField()),
                ('upper_state_energy', core.models.ArbitraryDecimalField()),
                ('lower_state_degeneracy', models.IntegerField()),
                ('upper_state_degeneracy', models.IntegerField()),
                ('lower_state_qn', models.JSONField()),
                ('upper_state_qn', models.JSONField()),
                ('rovibrational', models.BooleanField()),
                ('vib_qn', models.CharField(blank=True, max_length=255)),
                ('pickett_qn_code', models.IntegerField()),
                ('pickett_lower_state_qn', models.CharField(max_length=255)),
                ('pickett_upper_state_qn', models.CharField(max_length=255)),
                ('notes', models.TextField(blank=True)),
            ],
    ),
        migrations.CreateModel(
            name='Linelist',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('linelist_name', models.CharField(max_length=255, unique=True)),
            ],
    ),
        migrations.CreateModel(
            name='MetaReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('dipole_moment', models.BooleanField()),
                ('spectrum', models.BooleanField()),
                ('notes', models.TextField(blank=True)),
            ],
    ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('doi', models.CharField(blank=True, max_length=255)),
                ('ref_url', models.CharField(max_length=255, unique=True)),
                ('bibtex', models.FileField(upload_to=core.models.bib_file_path, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['bib'])])),
                ('notes', models.TextField(blank=True)),
            ],
    ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.JSONField()),
                ('iupac_name', models.CharField(max_length=255, unique=True)),
                ('name_formula', models.CharField(max_length=255)),
                ('name_html', models.CharField(max_length=255)),
                ('molecular_mass', core.models.ArbitraryDecimalField()),
                ('smiles', models.CharField(max_length=255)),
                ('standard_inchi', models.CharField(max_length=255)),
                ('standard_inchi_key', models.CharField(max_length=255)),
                ('selfies', models.CharField(max_length=255)),
                ('mol_obj', django_rdkit.models.fields.MolField()),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Species',
            },
    ),
        migrations.CreateModel(
            name='SpeciesMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('molecule_tag', models.IntegerField(blank=True, null=True)),
                ('hyperfine', models.BooleanField()),
                ('degree_of_freedom', models.IntegerField()),
                ('category', models.CharField(max_length=255)),
                ('partition_function', models.JSONField()),
                ('mu_a', core.models.ArbitraryDecimalField(null=True)),
                ('mu_b', core.models.ArbitraryDecimalField(null=True)),
                ('mu_c', core.models.ArbitraryDecimalField(null=True)),
                ('a_const', core.models.ArbitraryDecimalField(null=True)),
                ('b_const', core.models.ArbitraryDecimalField(null=True)),
                ('c_const', core.models.ArbitraryDecimalField(null=True)),
                ('data_date', models.DateField()),
                ('data_contributor', models.CharField(max_length=255)),
                ('int_file', models.FileField(null=True, upload_to=core.models.sp_file_path, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['int'])])),
                ('var_file', models.FileField(null=True, upload_to=core.models.sp_file_path, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['var'])])),
                ('fit_file', models.FileField(null=True, upload_to=core.models.sp_file_path, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['fit'])])),
                ('lin_file', models.FileField(null=True, upload_to=core.models.sp_file_path, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['lin'])])),
                ('qpart_file', models.FileField(upload_to=core.models.sp_file_path, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['qpart'])])),
                ('notes', models.TextField(blank=True)),
                ('linelist', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='core.linelist')),
                ('species', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='core.species')),
            ],
            options={
                'verbose_name_plural': 'Species metadata',
            },
    ),
        migrations.AddIndex(
            model_name='species',
            index=django.contrib.postgres.indexes.GistIndex(
                fields=['mol_obj'], name='core_specie_mol_obj_340dd3_gist'),
    ),
        migrations.AddField(
            model_name='metareference',
            name='meta',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to='core.speciesmetadata'),
    ),
        migrations.AddField(
            model_name='metareference',
            name='ref',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to='core.reference'),
    ),
        migrations.AddField(
            model_name='line',
            name='meta',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to='core.speciesmetadata'),
    ),
        migrations.AddField(
            model_name='historicaluser',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', to=settings.AUTH_USER_MODEL),
    ),
        migrations.AddField(
            model_name='historicalspeciesmetadata',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', to=settings.AUTH_USER_MODEL),
    ),
        migrations.AddField(
            model_name='historicalspeciesmetadata',
            name='linelist',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.linelist'),
    ),
        migrations.AddField(
            model_name='historicalspeciesmetadata',
            name='species',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.species'),
    ),
        migrations.AddField(
            model_name='historicalspecies',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', to=settings.AUTH_USER_MODEL),
    ),
        migrations.AddField(
            model_name='historicalreference',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', to=settings.AUTH_USER_MODEL),
    ),
        migrations.AddField(
            model_name='historicalmetareference',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', to=settings.AUTH_USER_MODEL),
    ),
        migrations.AddField(
            model_name='historicalmetareference',
            name='meta',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.speciesmetadata'),
    ),
        migrations.AddField(
            model_name='historicalmetareference',
            name='ref',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.reference'),
    ),
        migrations.AddField(
            model_name='historicallinelist',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', to=settings.AUTH_USER_MODEL),
    ),
        migrations.AddField(
            model_name='historicalline',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', to=settings.AUTH_USER_MODEL),
    ),
        migrations.AddField(
            model_name='historicalline',
            name='meta',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.speciesmetadata'),
    ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                         related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
    ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set',
                                         related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
    ),
        migrations.AddIndex(
            model_name='line',
            index=models.Index(fields=['frequency'],
                               name='core_line_frequen_cc6179_idx'),
    ),
    ]
